# GitHub Actions Workflow created for handling the release process based on the draft release prepared with the Build workflow.
# Running the publishPlugin task requires all following secrets to be provided: PUBLISH_TOKEN, PRIVATE_KEY, PRIVATE_KEY_PASSWORD, CERTIFICATE_CHAIN.
# See https://plugins.jetbrains.com/docs/intellij/plugin-signing.html for more information.

name: Manual Release
on:
  workflow_dispatch:
    inputs:
      publishToMarketPlace:
        description: 'Publish to JetBrains Marketplace ?'
        required: true
        type: choice
        options:
          - 'true'
          - 'false'
        default: 'false'

jobs:

  # Prepare and publish the plugin to JetBrains Marketplace repository
  release:
    if: ${{ inputs.publishToMarketPlace == 'true'}}
    name: Publish Plugin
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          CHANGELOG="$(cat << 'EOM' | sed -e 's/^[[:space:]]*$//g' -e '/./,$!d'
          ${{ github.event.release.body }}
          EOM
          )"
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          git config user.email "action@github.com"
          git config user.name "GitHub Action"

      - name: Set release version
        id: release_version
        shell: bash
        run: |
          PLUGIN_VERSION=$(./set_release_version.sh)
          echo "Release version: $PLUGIN_VERSION"
          
          echo "${PLUGIN_VERSION}-SNAPSHOT" >> $GITHUB_ENV
          echo "plugin_version=$PLUGIN_VERSION" >> $GITHUB_OUTPUT
          
          git commit -sam "chore(skip-release): set version to $PLUGIN_VERSION"
          git push --set-upstream origin main
          

      # Publish the plugin to JetBrains Marketplace
      - name: Publish Plugin
        env:
          PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
        run: |
          ./gradlew publishPlugin
          echo "Published $PLUGIN_VERSION to the Jetbrains Marketplace"

      - name: Tag release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.email "action@github.com"
          git config user.name "GitHub Action"
          git commit -sam "chore(skip-release): set version to $PLUGIN_VERSION"
          git tag $PLUGIN_VERSION
          git push origin $PLUGIN_VERSION

      # Upload artifact as a release asset
      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload $PLUGIN_VERSION ./build/distributions/*

      # Set next SNAPSHOT version
      - name: Increment version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PLUGIN_VERSION=$(./increment_version.sh)
          echo "Set $PLUGIN_VERSION in gradle.properties"
          git config user.email "action@github.com"
          git config user.name "GitHub Action"
          git commit -sam "chore(skip-release): set version to $PLUGIN_VERSION"
          git push origin main
