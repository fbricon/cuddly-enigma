# GitHub Actions Workflow created for handling the release process based on the draft release prepared with the Build workflow.
# Running the publishPlugin task requires all following secrets to be provided: PUBLISH_TOKEN, PRIVATE_KEY, PRIVATE_KEY_PASSWORD, CERTIFICATE_CHAIN.
# See https://plugins.jetbrains.com/docs/intellij/plugin-signing.html for more information.

name: Pre-Release
on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:
    inputs:
      publishToMarketPlace:
        description: 'Publish to JetBrains Marketplace ?'
        required: true
        type: choice
        options:
          - 'true'
          - 'false'
        default: 'false'

jobs:
  should-build-change:
    runs-on: ubuntu-latest
    outputs:
      repo-cache-hit: ${{ steps.cache-last-commit.outputs.cache-hit }}
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v4
      - run: |
          git rev-parse HEAD >> lastCommit
      - name: Check New Changes
        id: cache-last-commit
        uses: actions/cache@v3
        with:
          path: lastCommit
          key: lastCommit-${{ hashFiles('lastCommit') }}

  # Prepare and publish the plugin to JetBrains Marketplace repository
  release:
    needs: should-build-change
    if: ${{ needs.should-build-change.outputs.repo-cache-hit != 'true' || github.event_name != 'schedule' }}
    name: Publish Plugin
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          TIMESTAMPED_PLUGIN_VERSION=$(./get_timestamp_version.sh)
          echo "plugin.version<<EOF" >> $GITHUB_OUTPUT
          echo "$TIMESTAMPED_PLUGIN_VERSION" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          CHANGELOG="$(cat << 'EOM' | sed -e 's/^[[:space:]]*$//g' -e '/./,$!d'
          ${{ github.event.release.body }}
          EOM
          )"
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Update Unreleased section with the current release note
      - name: Patch Changelog
        if: ${{ steps.properties.outputs.changelog != '' }}
        env:
          CHANGELOG: ${{ steps.properties.outputs.changelog }}
        run: |
          ./gradlew patchChangelog --release-note="$CHANGELOG"

      - name: Publish Plugin
        env:
          PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
          PLUGIN_VERSION: ${{  steps.properties.outputs.plugin.version }}
          # No signing from Github Actions at this point
          # CERTIFICATE_CHAIN: ${{ secrets.CERTIFICATE_CHAIN }}
          # PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          # PRIVATE_KEY_PASSWORD: ${{ secrets.PRIVATE_KEY_PASSWORD }}
        run: ./gradlew publishPlugin -PpluginVersion=${PLUGIN_VERSION}

      # Upload artifact as a release asset
#      - name: Upload Release Asset
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: gh release upload ${{ github.event.release.tag_name }} ./build/distributions/*
#
#      # Create a pull request
#      - name: Create Pull Request
#        if: ${{ steps.properties.outputs.changelog != '' }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          VERSION="${{ github.event.release.tag_name }}"
#          BRANCH="changelog-update-$VERSION"
#          LABEL="release changelog"
#
#          git config user.email "action@github.com"
#          git config user.name "GitHub Action"
#
#          git checkout -b $BRANCH
#          git commit -am "chore(skip-release): Changelog update - $VERSION"
#          git push --set-upstream origin $BRANCH
#
#          gh label create "$LABEL" \
#            --description "Pull requests with release changelog update" \
#            --force \
#            || true
#
#          gh pr create \
#            --title "chore(skip-release): changelog update - \`$VERSION\`" \
#            --body "Current pull request contains patched \`CHANGELOG.md\` file for the \`$VERSION\` version." \
#            --label "$LABEL" \
#            --head $BRANCH
